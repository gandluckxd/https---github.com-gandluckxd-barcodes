"""
–ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏–π
"""
import sys
import requests
import pyttsx3
import threading
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QTableWidget, QTableWidgetItem,
    QTextEdit, QGroupBox, QMessageBox, QHeaderView
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QObject
from PyQt5.QtGui import QFont, QColor

import config


class TTSWorker(QObject):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TTS –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    
    def __init__(self):
        super().__init__()
        self.engine = None
        self.init_engine()
    
    def init_engine(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS –¥–≤–∏–∂–∫–∞"""
        try:
            self.engine = pyttsx3.init()
            self.engine.setProperty('rate', config.TTS_RATE)
            self.engine.setProperty('volume', config.TTS_VOLUME)
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
            voices = self.engine.getProperty('voices')
            for voice in voices:
                if 'ru' in voice.languages or 'russian' in voice.name.lower():
                    self.engine.setProperty('voice', voice.id)
                    break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {e}")
            self.engine = None
    
    def speak(self, text):
        """–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç"""
        if self.engine:
            try:
                self.engine.say(text)
                self.engine.runAndWait()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")


class BarcodeApp(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    update_ui_signal = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        
        # TTS Worker
        self.tts_worker = TTSWorker()
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        self.scan_history = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total': 0,
            'success': 0,
            'failed': 0,
            'already_approved': 0
        }
        
        self.init_ui()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        QTimer.singleShot(500, self.check_api_connection)
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI"""
        self.setWindowTitle(config.WINDOW_TITLE)
        self.setGeometry(100, 100, config.WINDOW_WIDTH, config.WINDOW_HEIGHT)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        
        # === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
        title_label = QLabel("üì¶ –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏–π")
        title_font = QFont()
        title_font.setPointSize(18)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title_label)
        
        # === –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===
        self.connection_status = QLabel("üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        self.connection_status.setAlignment(Qt.AlignCenter)
        status_font = QFont()
        status_font.setPointSize(10)
        self.connection_status.setFont(status_font)
        main_layout.addWidget(self.connection_status)
        
        # === –í–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ ===
        barcode_group = QGroupBox("–í–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞")
        barcode_layout = QHBoxLayout()
        barcode_group.setLayout(barcode_layout)
        
        barcode_label = QLabel("–®—Ç—Ä–∏—Ö–∫–æ–¥:")
        barcode_label.setMinimumWidth(100)
        barcode_layout.addWidget(barcode_label)
        
        self.barcode_input = QLineEdit()
        self.barcode_input.setPlaceholderText("–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é...")
        self.barcode_input.returnPressed.connect(self.process_barcode)
        barcode_font = QFont()
        barcode_font.setPointSize(14)
        self.barcode_input.setFont(barcode_font)
        self.barcode_input.setMinimumHeight(40)
        barcode_layout.addWidget(self.barcode_input)
        
        process_btn = QPushButton("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å")
        process_btn.clicked.connect(self.process_barcode)
        process_btn.setMinimumHeight(40)
        process_btn.setMinimumWidth(120)
        btn_font = QFont()
        btn_font.setPointSize(12)
        btn_font.setBold(True)
        process_btn.setFont(btn_font)
        barcode_layout.addWidget(process_btn)
        
        main_layout.addWidget(barcode_group)
        
        # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
        stats_group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QHBoxLayout()
        stats_group.setLayout(stats_layout)
        
        self.stats_label = QLabel(self.get_stats_text())
        self.stats_label.setAlignment(Qt.AlignCenter)
        stats_font = QFont()
        stats_font.setPointSize(11)
        self.stats_label.setFont(stats_font)
        stats_layout.addWidget(self.stats_label)
        
        main_layout.addWidget(stats_group)
        
        # === –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π ===
        history_group = QGroupBox("–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        history_layout = QVBoxLayout()
        history_group.setLayout(history_layout)
        
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(7)
        self.history_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è", "–°—Ç–∞—Ç—É—Å", "–ó–∞–∫–∞–∑", "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–ò–∑–¥–µ–ª–∏–µ ‚Ññ", "–†–∞–∑–º–µ—Ä—ã", "–°–æ–æ–±—â–µ–Ω–∏–µ"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.history_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(6, QHeaderView.Stretch)
        
        self.history_table.setAlternatingRowColors(True)
        self.history_table.setEditTriggers(QTableWidget.NoEditTriggers)
        
        history_layout.addWidget(self.history_table)
        
        main_layout.addWidget(history_group)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.barcode_input.setFocus()
    
    def get_stats_text(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return (f"–í—Å–µ–≥–æ: {self.stats['total']} | "
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['success']} | "
                f"‚ö†Ô∏è –£–∂–µ –ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–æ: {self.stats['already_approved']} | "
                f"‚ùå –û—à–∏–±–æ–∫: {self.stats['failed']}")
    
    def check_api_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            response = requests.get(
                f"{config.API_BASE_URL}{config.API_HEALTH_ENDPOINT}",
                timeout=3
            )
            if response.status_code == 200:
                data = response.json()
                if data.get('database_connected'):
                    self.connection_status.setText("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ API –∏ –ë–î")
                    self.connection_status.setStyleSheet("color: green;")
                else:
                    self.connection_status.setText("üü° API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                    self.connection_status.setStyleSheet("color: orange;")
            else:
                self.connection_status.setText("üî¥ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.connection_status.setStyleSheet("color: red;")
        except Exception as e:
            self.connection_status.setText(f"üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            self.connection_status.setStyleSheet("color: red;")
    
    def process_barcode(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞"""
        barcode = self.barcode_input.text().strip()
        
        if not barcode:
            return
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.barcode_input.clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['total'] += 1
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(
                f"{config.API_BASE_URL}{config.API_PROCESS_BARCODE_ENDPOINT}",
                json={"barcode": barcode},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.handle_response(data, barcode)
            else:
                self.handle_error(f"HTTP –æ—à–∏–±–∫–∞ {response.status_code}", barcode)
                
        except requests.exceptions.Timeout:
            self.handle_error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è", barcode)
        except requests.exceptions.ConnectionError:
            self.handle_error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", barcode)
        except Exception as e:
            self.handle_error(f"–û—à–∏–±–∫–∞: {str(e)}", barcode)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats_label.setText(self.get_stats_text())
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.barcode_input.setFocus()
    
    def handle_response(self, data, barcode):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
        success = data.get('success', False)
        message = data.get('message', '')
        voice_message = data.get('voice_message', '')
        product_info = data.get('product_info')
        
        if success:
            self.stats['success'] += 1
            status = "‚úÖ –£—Å–ø–µ—Ö"
            status_color = QColor(0, 200, 0)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —É–∂–µ –ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ –∏–ª–∏ –æ—à–∏–±–∫–∞
            if "—É–∂–µ –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ –≥–æ—Ç–æ–≤—ã–º" in message.lower():
                self.stats['already_approved'] += 1
                status = "‚ö†Ô∏è –£–∂–µ –ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–æ"
                status_color = QColor(255, 165, 0)
            else:
                self.stats['failed'] += 1
                status = "‚ùå –û—à–∏–±–∫–∞"
                status_color = QColor(255, 0, 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.add_to_history(
            status=status,
            status_color=status_color,
            message=message,
            product_info=product_info
        )
        
        # –û–∑–≤—É—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if voice_message:
            threading.Thread(
                target=self.tts_worker.speak,
                args=(voice_message,),
                daemon=True
            ).start()
    
    def handle_error(self, error_message, barcode):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏"""
        self.stats['failed'] += 1
        
        self.add_to_history(
            status="‚ùå –û—à–∏–±–∫–∞",
            status_color=QColor(255, 0, 0),
            message=error_message,
            product_info=None
        )
        
        # –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
        threading.Thread(
            target=self.tts_worker.speak,
            args=("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É",),
            daemon=True
        ).start()
    
    def add_to_history(self, status, status_color, message, product_info):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        current_time = datetime.now().strftime("%H:%M:%S")
        
        row_position = self.history_table.rowCount()
        self.history_table.insertRow(0)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        
        # –í—Ä–µ–º—è
        time_item = QTableWidgetItem(current_time)
        self.history_table.setItem(0, 0, time_item)
        
        # –°—Ç–∞—Ç—É—Å
        status_item = QTableWidgetItem(status)
        status_item.setForeground(status_color)
        font = QFont()
        font.setBold(True)
        status_item.setFont(font)
        self.history_table.setItem(0, 1, status_item)
        
        if product_info:
            # –ó–∞–∫–∞–∑
            self.history_table.setItem(0, 2, QTableWidgetItem(product_info.get('order_number', '')))
            
            # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            self.history_table.setItem(0, 3, QTableWidgetItem(product_info.get('construction_number', '')))
            
            # –ò–∑–¥–µ–ª–∏–µ ‚Ññ
            item_num = f"{product_info.get('item_number', '')} / {product_info.get('qty', '')}"
            self.history_table.setItem(0, 4, QTableWidgetItem(item_num))
            
            # –†–∞–∑–º–µ—Ä—ã
            width = product_info.get('width', 0)
            height = product_info.get('height', 0)
            if width and height:
                size_str = f"{width} x {height}"
            else:
                size_str = "-"
            self.history_table.setItem(0, 5, QTableWidgetItem(size_str))
        else:
            self.history_table.setItem(0, 2, QTableWidgetItem("-"))
            self.history_table.setItem(0, 3, QTableWidgetItem("-"))
            self.history_table.setItem(0, 4, QTableWidgetItem("-"))
            self.history_table.setItem(0, 5, QTableWidgetItem("-"))
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        self.history_table.setItem(0, 6, QTableWidgetItem(message))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 100 –∑–∞–ø–∏—Å–µ–π
        if self.history_table.rowCount() > 100:
            self.history_table.removeRow(100)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = QApplication(sys.argv)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle('Fusion')
    
    window = BarcodeApp()
    window.show()
    
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()

