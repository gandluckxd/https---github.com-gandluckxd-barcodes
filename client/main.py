"""
–ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏–π
"""
import sys
import os
import requests
import threading
from datetime import datetime
from gtts import gTTS
import pygame
import tempfile
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QTableWidget, QTableWidgetItem,
    QGroupBox, QHeaderView
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QObject
from PyQt5.QtGui import QFont, QColor, QIcon, QPixmap, QImage
from PIL import Image, ImageDraw, ImageFont
import ctypes

import config


def set_windows_appid():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç AppUserModelID –¥–ª—è Windows –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –≤ –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Windows 7+
        app_id = 'VKCompany.BarcodeApp.ProductTracking.1.0'
        ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(app_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AppUserModelID: {e}")


def create_emoji_icon():
    """–°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É —Å emoji –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å emoji
        size = 256
        image = Image.new('RGBA', (size, size), (0, 0, 0, 0))
        draw = ImageDraw.Draw(image)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π emoji
        try:
            # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º Segoe UI Emoji
            font = ImageFont.truetype("seguiemj.ttf", size - 40)
        except (OSError, IOError):
            try:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è Windows
                font = ImageFont.truetype("arial.ttf", size - 40)
            except (OSError, IOError):
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                font = ImageFont.load_default()
        
        # –†–∏—Å—É–µ–º emoji –≤ —Ü–µ–Ω—Ç—Ä–µ
        emoji = "üì¶"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        bbox = draw.textbbox((0, 0), emoji, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        position = ((size - text_width) // 2 - bbox[0], 
                   (size - text_height) // 2 - bbox[1])
        
        draw.text(position, emoji, font=font, embedded_color=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ QPixmap
        image_bytes = image.tobytes("raw", "RGBA")
        qimage = QImage(image_bytes, size, size, QImage.Format_RGBA8888)
        pixmap = QPixmap.fromImage(qimage)
        
        return QIcon(pixmap)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏: {e}")
        return None


class TTSWorker(QObject):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TTS –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (Google TTS)"""
    
    def __init__(self):
        super().__init__()
        self.init_engine()
    
    def init_engine(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS –¥–≤–∏–∂–∫–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame mixer –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
            pygame.mixer.init()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ pygame mixer: {e}")
    
    def speak(self, text):
        """–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Google TTS"""
        temp_file = None
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as fp:
                temp_file = fp.name
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å —á–µ—Ä–µ–∑ Google TTS
            tts = gTTS(text=text, lang='ru', slow=False)
            tts.save(temp_file)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            pygame.mixer.music.load(temp_file)
            pygame.mixer.music.play()
            
            # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            while pygame.mixer.music.get_busy():
                pygame.time.Clock().tick(10)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_file and os.path.exists(temp_file):
                try:
                    pygame.mixer.music.unload()
                    os.remove(temp_file)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")


class BarcodeApp(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    update_ui_signal = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        
        # TTS Worker
        self.tts_worker = TTSWorker()
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        self.scan_history = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total': 0,
            'success': 0,
            'failed': 0,
            'already_approved': 0
        }
        
        self.init_ui()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        QTimer.singleShot(500, self.check_api_connection)
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI"""
        self.setWindowTitle(config.WINDOW_TITLE)
        self.setGeometry(100, 100, config.WINDOW_WIDTH, config.WINDOW_HEIGHT)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        
        # === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
        title_label = QLabel("üì¶ –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏–π")
        title_font = QFont()
        title_font.setPointSize(28)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title_label)
        
        # === –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===
        self.connection_status = QLabel("üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        self.connection_status.setAlignment(Qt.AlignCenter)
        status_font = QFont()
        status_font.setPointSize(16)
        status_font.setBold(True)
        self.connection_status.setFont(status_font)
        main_layout.addWidget(self.connection_status)
        
        # === –í–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ ===
        barcode_group = QGroupBox("–í–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞")
        group_font = QFont()
        group_font.setPointSize(16)
        group_font.setBold(True)
        barcode_group.setFont(group_font)
        barcode_layout = QHBoxLayout()
        barcode_group.setLayout(barcode_layout)
        
        barcode_label = QLabel("–®—Ç—Ä–∏—Ö–∫–æ–¥:")
        barcode_label.setMinimumWidth(180)
        label_font = QFont()
        label_font.setPointSize(18)
        label_font.setBold(True)
        barcode_label.setFont(label_font)
        barcode_layout.addWidget(barcode_label)
        
        self.barcode_input = QLineEdit()
        self.barcode_input.setPlaceholderText("–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é...")
        self.barcode_input.returnPressed.connect(self.process_barcode)
        barcode_font = QFont()
        barcode_font.setPointSize(20)
        self.barcode_input.setFont(barcode_font)
        self.barcode_input.setMinimumHeight(60)
        barcode_layout.addWidget(self.barcode_input)
        
        process_btn = QPushButton("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å")
        process_btn.clicked.connect(self.process_barcode)
        process_btn.setMinimumHeight(60)
        process_btn.setMinimumWidth(200)
        btn_font = QFont()
        btn_font.setPointSize(18)
        btn_font.setBold(True)
        process_btn.setFont(btn_font)
        barcode_layout.addWidget(process_btn)
        
        main_layout.addWidget(barcode_group)
        
        # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
        stats_group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_group_font = QFont()
        stats_group_font.setPointSize(16)
        stats_group_font.setBold(True)
        stats_group.setFont(stats_group_font)
        stats_layout = QHBoxLayout()
        stats_group.setLayout(stats_layout)
        
        self.stats_label = QLabel(self.get_stats_text())
        self.stats_label.setAlignment(Qt.AlignCenter)
        stats_font = QFont()
        stats_font.setPointSize(16)
        stats_font.setBold(True)
        self.stats_label.setFont(stats_font)
        stats_layout.addWidget(self.stats_label)
        
        main_layout.addWidget(stats_group)
        
        # === –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π ===
        history_group = QGroupBox("–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        history_group_font = QFont()
        history_group_font.setPointSize(16)
        history_group_font.setBold(True)
        history_group.setFont(history_group_font)
        history_layout = QVBoxLayout()
        history_group.setLayout(history_layout)
        
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(8)
        self.history_table.setHorizontalHeaderLabels([
            "–°—Ç–∞—Ç—É—Å", "–®—Ç—Ä–∏—Ö–∫–æ–¥", "–ó–∞–∫–∞–∑", "–ò–∑–¥–µ–ª–∏–µ", "–ù–æ–º–µ—Ä ‚Ññ", "–†–∞–∑–º–µ—Ä—ã", "–í—Ä–µ–º—è", "–°–æ–æ–±—â–µ–Ω–∏–µ"
        ])
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç —Ç–∞–±–ª–∏—Ü—ã
        table_font = QFont()
        table_font.setPointSize(13)
        self.history_table.setFont(table_font)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header = self.history_table.horizontalHeader()
        header_font = QFont()
        header_font.setPointSize(14)
        header_font.setBold(True)
        header.setFont(header_font)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # –°—Ç–∞—Ç—É—Å
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # –®—Ç—Ä–∏—Ö–∫–æ–¥
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # –ó–∞–∫–∞–∑
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # –ò–∑–¥–µ–ª–∏–µ
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)  # –ù–æ–º–µ—Ä ‚Ññ
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)  # –†–∞–∑–º–µ—Ä—ã
        header.setSectionResizeMode(6, QHeaderView.ResizeToContents)  # –í—Ä–µ–º—è
        header.setSectionResizeMode(7, QHeaderView.Stretch)  # –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
        self.history_table.verticalHeader().setDefaultSectionSize(40)
        
        self.history_table.setAlternatingRowColors(True)
        self.history_table.setEditTriggers(QTableWidget.NoEditTriggers)
        
        history_layout.addWidget(self.history_table)
        
        main_layout.addWidget(history_group)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.barcode_input.setFocus()
    
    def get_stats_text(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return (f"–í—Å–µ–≥–æ: {self.stats['total']} | "
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['success']} | "
                f"‚ö†Ô∏è –£–∂–µ –ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–æ: {self.stats['already_approved']} | "
                f"‚ùå –û—à–∏–±–æ–∫: {self.stats['failed']}")
    
    def check_api_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            response = requests.get(
                f"{config.API_BASE_URL}{config.API_HEALTH_ENDPOINT}",
                timeout=15
            )
            if response.status_code == 200:
                data = response.json()
                if data.get('database_connected'):
                    self.connection_status.setText("üü¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
                    self.connection_status.setStyleSheet("color: green;")
                else:
                    self.connection_status.setText("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    self.connection_status.setStyleSheet("color: red;")
            else:
                self.connection_status.setText("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                self.connection_status.setStyleSheet("color: red;")
        except Exception:
            self.connection_status.setText("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            self.connection_status.setStyleSheet("color: red;")
    
    def process_barcode(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞"""
        barcode = self.barcode_input.text().strip()
        
        if not barcode:
            return
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.barcode_input.clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['total'] += 1
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(
                f"{config.API_BASE_URL}{config.API_PROCESS_BARCODE_ENDPOINT}",
                json={"barcode": barcode},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.handle_response(data, barcode)
            else:
                self.handle_error(f"HTTP –æ—à–∏–±–∫–∞ {response.status_code}", barcode)
                
        except requests.exceptions.Timeout:
            self.handle_error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è", barcode)
        except requests.exceptions.ConnectionError:
            self.handle_error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", barcode)
        except Exception as e:
            self.handle_error(f"–û—à–∏–±–∫–∞: {str(e)}", barcode)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats_label.setText(self.get_stats_text())
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.barcode_input.setFocus()
    
    def handle_response(self, data, barcode):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
        success = data.get('success', False)
        message = data.get('message', '')
        voice_message = data.get('voice_message', '')
        product_info = data.get('product_info')
        
        if success:
            self.stats['success'] += 1
            status = "‚úÖ –£—Å–ø–µ—Ö"
            status_color = QColor(0, 200, 0)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —É–∂–µ –ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ –∏–ª–∏ –æ—à–∏–±–∫–∞
            if "—É–∂–µ –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ –≥–æ—Ç–æ–≤—ã–º" in message.lower():
                self.stats['already_approved'] += 1
                status = "‚ö†Ô∏è –£–∂–µ –ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–æ"
                status_color = QColor(255, 165, 0)
            else:
                self.stats['failed'] += 1
                status = "‚ùå –û—à–∏–±–∫–∞"
                status_color = QColor(255, 0, 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.add_to_history(
            status=status,
            status_color=status_color,
            message=message,
            product_info=product_info,
            barcode=barcode
        )
        
        # –û–∑–≤—É—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if voice_message:
            threading.Thread(
                target=self.tts_worker.speak,
                args=(voice_message,),
                daemon=True
            ).start()
    
    def handle_error(self, error_message, barcode):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏"""
        self.stats['failed'] += 1
        
        self.add_to_history(
            status="‚ùå –û—à–∏–±–∫–∞",
            status_color=QColor(255, 0, 0),
            message=error_message,
            product_info=None,
            barcode=barcode
        )
        
        # –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
        threading.Thread(
            target=self.tts_worker.speak,
            args=("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É",),
            daemon=True
        ).start()
    
    def add_to_history(self, status, status_color, message, product_info, barcode=""):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        current_time = datetime.now().strftime("%H:%M:%S")
        
        self.history_table.insertRow(0)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        
        # –ü–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤: "–°—Ç–∞—Ç—É—Å", "–®—Ç—Ä–∏—Ö–∫–æ–¥", "–ó–∞–∫–∞–∑", "–ò–∑–¥–µ–ª–∏–µ", "–ù–æ–º–µ—Ä ‚Ññ", "–†–∞–∑–º–µ—Ä—ã", "–í—Ä–µ–º—è", "–°–æ–æ–±—â–µ–Ω–∏–µ"
        
        # –°—Ç–∞—Ç—É—Å (–∫–æ–ª–æ–Ω–∫–∞ 0)
        status_item = QTableWidgetItem(status)
        status_item.setForeground(status_color)
        font = QFont()
        font.setPointSize(13)
        font.setBold(True)
        status_item.setFont(font)
        self.history_table.setItem(0, 0, status_item)
        
        # –®—Ç—Ä–∏—Ö–∫–æ–¥ (–∫–æ–ª–æ–Ω–∫–∞ 1)
        self.history_table.setItem(0, 1, QTableWidgetItem(barcode))
        
        if product_info:
            # –ó–∞–∫–∞–∑ (–∫–æ–ª–æ–Ω–∫–∞ 2)
            self.history_table.setItem(0, 2, QTableWidgetItem(product_info.get('order_number', '')))
            
            # –ò–∑–¥–µ–ª–∏–µ (–∫–æ–ª–æ–Ω–∫–∞ 3)
            self.history_table.setItem(0, 3, QTableWidgetItem(product_info.get('construction_number', '')))
            
            # –ù–æ–º–µ—Ä ‚Ññ (–∫–æ–ª–æ–Ω–∫–∞ 4)
            item_num = f"{product_info.get('item_number', '')} / {product_info.get('qty', '')}"
            self.history_table.setItem(0, 4, QTableWidgetItem(item_num))
            
            # –†–∞–∑–º–µ—Ä—ã (–∫–æ–ª–æ–Ω–∫–∞ 5)
            width = product_info.get('width', 0)
            height = product_info.get('height', 0)
            if width and height:
                size_str = f"{width} x {height}"
            else:
                size_str = "-"
            self.history_table.setItem(0, 5, QTableWidgetItem(size_str))
        else:
            self.history_table.setItem(0, 2, QTableWidgetItem("-"))
            self.history_table.setItem(0, 3, QTableWidgetItem("-"))
            self.history_table.setItem(0, 4, QTableWidgetItem("-"))
            self.history_table.setItem(0, 5, QTableWidgetItem("-"))
        
        # –í—Ä–µ–º—è (–∫–æ–ª–æ–Ω–∫–∞ 6)
        time_item = QTableWidgetItem(current_time)
        self.history_table.setItem(0, 6, time_item)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–ª–æ–Ω–∫–∞ 7)
        self.history_table.setItem(0, 7, QTableWidgetItem(message))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 100 –∑–∞–ø–∏—Å–µ–π
        if self.history_table.rowCount() > 100:
            self.history_table.removeRow(100)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AppUserModelID –¥–ª—è Windows (–¥–æ —Å–æ–∑–¥–∞–Ω–∏—è QApplication)
    set_windows_appid()
    
    app = QApplication(sys.argv)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle('Fusion')
    
    # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —Å emoji
    icon = create_emoji_icon()
    if icon:
        app.setWindowIcon(icon)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = BarcodeApp()
    if icon:
        window.setWindowIcon(icon)
    window.showMaximized()  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()

